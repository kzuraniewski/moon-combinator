--[[ AUTOGENERATED LIBRARY ]] lib={}lib.CLOCK_SIGNAL='signal-A'lib.MAX_DELAY=60*60*60*24*365;function lib.passSignals(...)local a={...}if#a==0 then out=red;return end;if out==nil then out={}end;for b,c in ipairs(a)do out[c]=red[c]end end;function lib.createTrigger(d)delay=lib.MAX_DELAY;irq=d end;function lib.synchronize()lib.createTrigger(lib.CLOCK_SIGNAL)end;function lib.reset()out={}var={}end

-- desc: synchronic unit iterator
-- connect to Unit Scanner and red wire its output back

local SIGNAL_NAMES = {
    'vehicle-hauler-0-_-signal', 'vehicle-miner-0-_-signal',
    'vehicle-miner-mk2-0-_-signal', 'vehicle-miner-mk3-0-_-signal',
    'vehicle-miner-mk4-0-_-signal', 'vehicle-miner-mk5-0-_-signal'
}

-- if last quantity was 0 then move to next signal, else increment unitIndex
if red['signal-count'] == 0 or (var.unitIndex or 0) >= red['signal-count'] then
    -- increment signalIndex
    var.signalIndex = (var.signalIndex or 0) % #SIGNAL_NAMES + 1

    -- reset unitIndex
    var.unitIndex = 1
else
    -- increment unitIndex
    var.unitIndex = (var.unitIndex) % red['signal-count'] + 1
end

-- send test signal
out = {[SIGNAL_NAMES[var.signalIndex]] = var.unitIndex}

lib.synchronize();
